type: edu
custom_name: stage6
files:
- name: test/Test.java
  visible: true
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.PredefinedIOTestCase;

    import java.util.List;

    public class Test extends BaseStageTest {

        public Test() throws Exception {
            super(Main.class);
        }

        @Override
        public List<PredefinedIOTestCase> generate() {
            return List.of(
                    /* Check simple additions and subtractions */
                    new PredefinedIOTestCase(
                            "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit",
                            "2\n-5\n11\nBye!"
                    ),
                    /* Check handling unknown commands */
                    new PredefinedIOTestCase(
                            "/command\n/exit",
                            "Unknown command\nBye!"
                    ),
                    /* Check different assignments */
                    new PredefinedIOTestCase(
                            "n = 3\nm=4\na =   5\nb = a\nn\nm\na\nb\ncount = 10\ncount\n/exit",
                            "3\n4\n5\n5\n10\nBye!"
                    ),
                    /* Check expressions with variables */
                    new PredefinedIOTestCase(
                            "a = 3\nb = 4\nc = 5\na + b - c\nb - c + 4 - a\na = 800\na + b + c\n/exit",
                            "2\n0\n809\nBye!"
                    ),
                    /* Check reassignment */
                    new PredefinedIOTestCase(
                            "a = 1\na = 2\na = 3\na\n/exit",
                            "3\nBye!"
                    ),
                    /* Check handling unknown variables */
                    new PredefinedIOTestCase(
                            "q\nr\nq = 10\nr = 20\nq\nr\nR\n/exit",
                            "Unknown variable\n" +
                                    "Unknown variable\n" +
                                    "10\n20\n" +
                                    "Unknown variable\n" +
                                    "Bye!"
                    ),
                    /* Check handling incorrect assignments */
                    new PredefinedIOTestCase(
                            "a1 = 8\nn = a2a\na = 7 = 8\nnum = 10\n/exit",
                            "Invalid identifier\n" +
                                    "Invalid assignment\n" +
                                    "Invalid assignment\n" +
                                    "Bye!"
                    )
            );
        }
    }
  learner_created: false
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: src/calculator/command/ICommand.java
  visible: true
  text: |
    package calculator.command;

    public interface ICommand {
      String getName();
      String getDescription();
    }
  learner_created: true
- name: src/calculator/command/CommandManager.java
  visible: true
  text: |
    package calculator.command;

    import calculator.command.ICommand;

    import java.util.ArrayList;
    import java.util.Arrays;

    public class CommandManager {
      private ArrayList<ICommand> commands;

      public CommandManager(ICommand... commands) {
        this.commands = new ArrayList<>();
        addCommand(commands);
      }

      public ArrayList<ICommand> getCommands () {
          return commands;
      }

      public void addCommand(ICommand ... commands) {
          this.commands.addAll(Arrays.asList(commands));
      }
    }
  learner_created: true
- name: src/calculator/MathOperator.java
  visible: true
  text: |-
    package calculator;

    public class MathOperator {

        public static int operate (int a , int b , char op) {
            if(op == '+')
                return a + b;
            if(op == '-')
                return a - b;

            throw new ArithmeticException("Something wrong with the arguments");
        }


    }
  learner_created: true
- name: src/calculator/command/HelpCommand.java
  visible: true
  text: |
    package calculator.command;

    public class HelpCommand implements ICommand {

        @Override
        public String getName() {
            return "/help";
        }

        @Override
        public String getDescription() {
        return "The program calculates the sum of numbers";
        }
    }
  learner_created: true
- name: src/calculator/command/ExitCommand.java
  visible: true
  text: |
    package calculator.command;

    public class ExitCommand implements ICommand{
        @Override
        public String getName() {
            return "/exit";
        }

        @Override
        public String getDescription() {
            return "Exit the program and stop accepting user input";
        }
    }
  learner_created: true
- name: src/calculator/ExpressionEvaluator.java
  visible: true
  text: |
    package calculator;

    import calculator.exception.IllegalExpressionException;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.StringTokenizer;

    public class ExpressionEvaluator {
      private List<String> expressionTokens;
      private String expression;
      private Character[] legalOperators = {'-', '+'};

      public ExpressionEvaluator(String expression) throws IllegalExpressionException {
        this.expressionTokens = new ArrayList<>();
        this.expression = expression;
        expressionTokens.addAll(tokenizer());
      }

      public List<String> tokenizer() throws IllegalExpressionException {
        List<String> tokens = new ArrayList<>();
        StringTokenizer stringTokenizer = new StringTokenizer(expression);
        boolean number = true;
        int tokenTracker = 1;
        while (stringTokenizer.hasMoreTokens()) {
          String tempToken = stringTokenizer.nextToken();
          if (number) {
            if (isNumber(tempToken)) tokens.add(tempToken);
            else throw new IllegalExpressionException(tokenTracker);

          } else {

            tempToken = convertFollowingOperators(tempToken);

            if (isOperator(tempToken)) tokens.add(tempToken);
            else throw new IllegalExpressionException(tokenTracker);
          }
          number = !number;
          tokenTracker++;
        }

        return tokens;
      }

      public List<String> getTokens() {
        return expressionTokens;
      }

      public String convertFollowingOperators(String operators) {
        char firstOp = operators.charAt(0);
        for (int i = 1; i < operators.length(); i++) {
          if (firstOp != operators.charAt(i)) return " ";
        }

        if (firstOp == '-') {
          if (operators.length() % 2 == 0) return "+";
          else return "-";
        } else return String.valueOf(firstOp);
      }

      public int eval() {
        int result = Integer.parseInt(expressionTokens.get(0));
        while (expressionTokens.size() > 2) {
          result = simpleEval(1);
          cleanUpExpression(result, 1);
        }

        return result;
      }

      public void cleanUpExpression(int result, int operatorIndex) {
        expressionTokens.add(operatorIndex - 1, result + "");
        for (int i = 0; i < 3; i++) expressionTokens.remove(operatorIndex);
      }

      public int simpleEval(int operatorIndex) {
        int a = Integer.parseInt(expressionTokens.get(operatorIndex - 1));
        int b = Integer.parseInt(expressionTokens.get(operatorIndex + 1));
        char op = expressionTokens.get(operatorIndex).charAt(0);

        return MathOperator.operate(a, b, op);
      }

      public boolean isNumber(String str) {
        for (int i = 1; i < str.length(); i++) {
          if (!Character.isDigit(str.charAt(i))) return false;
        }
        return true;
      }

      public boolean isOperator(String operator) {
        if (operator.length() > 1 || operator.isEmpty()) return false;

        Arrays.sort(legalOperators);
        List<Character> listOfOperators = Arrays.asList(legalOperators);
        if (listOfOperators.indexOf(operator.charAt(0)) != -1) {return true;}
        return false;
      }
    }
  learner_created: true
- name: src/calculator/exception/InvalidExpression.java
  visible: true
  text: |
    package calculator.exception;

    public class IllegalExpressionException extends Exception {

        public IllegalExpressionException(int i){
            super("Unexpected character at column " + i);
        }
    }
  learner_created: true
- name: src/calculator/exception/InvalidAssignment.java
  visible: true
  learner_created: true
- name: src/calculator/exception/InvalidIdentifier.java
  visible: true
  learner_created: true
- name: src/calculator/exception/UnknownCommand.java
  visible: true
  learner_created: true
- name: src/calculator/exception/UnknownVariable.java
  visible: true
  learner_created: true
- name: src/calculator/expression/lExpression.java
  visible: true
  learner_created: true
- name: src/calculator/expression/VariableExpression.java
  visible: true
  learner_created: true
- name: src/calculator/expression/ArithmeticExpression.java
  visible: true
  learner_created: true
- name: src/calculator/expression/CommandExpression.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/225/implement
status: Unchecked
record: -1
